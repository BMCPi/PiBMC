// Package redfish provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package redfish

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BootSource.
const (
	BiosSetup    BootSource = "BiosSetup"
	Cd           BootSource = "Cd"
	Diags        BootSource = "Diags"
	Floppy       BootSource = "Floppy"
	Hdd          BootSource = "Hdd"
	None         BootSource = "None"
	Pxe          BootSource = "Pxe"
	RemoteDrive  BootSource = "RemoteDrive"
	SDCard       BootSource = "SDCard"
	UefiBootNext BootSource = "UefiBootNext"
	UefiHttp     BootSource = "UefiHttp"
	UefiShell    BootSource = "UefiShell"
	UefiTarget   BootSource = "UefiTarget"
	Usb          BootSource = "Usb"
	Utilities    BootSource = "Utilities"
)

// Defines values for BootSourceOverrideEnabled.
const (
	BootSourceOverrideEnabledContinuous BootSourceOverrideEnabled = "Continuous"
	BootSourceOverrideEnabledDisabled   BootSourceOverrideEnabled = "Disabled"
	BootSourceOverrideEnabledOnce       BootSourceOverrideEnabled = "Once"
)

// Defines values for ConnectedVia.
const (
	Applet       ConnectedVia = "Applet"
	NotConnected ConnectedVia = "NotConnected"
	Oem          ConnectedVia = "Oem"
	URI          ConnectedVia = "URI"
)

// Defines values for Health.
const (
	HealthCritical Health = "Critical"
	HealthOK       Health = "OK"
	HealthUnknown  Health = "Unknown"
	HealthWarning  Health = "Warning"
)

// Defines values for IDRACResetType.
const (
	IDRACResetTypeGracefulRestart IDRACResetType = "GracefulRestart"
)

// Defines values for IndicatorLED.
const (
	IndicatorLEDBlinking IndicatorLED = "Blinking"
	IndicatorLEDLit      IndicatorLED = "Lit"
	IndicatorLEDOff      IndicatorLED = "Off"
	IndicatorLEDUnknown  IndicatorLED = "Unknown"
)

// Defines values for ManagerType.
const (
	ManagerTypeAuxiliaryController  ManagerType = "AuxiliaryController"
	ManagerTypeBMC                  ManagerType = "BMC"
	ManagerTypeEnclosureManager     ManagerType = "EnclosureManager"
	ManagerTypeManagementController ManagerType = "ManagementController"
	ManagerTypeRackManager          ManagerType = "RackManager"
	ManagerTypeService              ManagerType = "Service"
)

// Defines values for PowerState.
const (
	Off         PowerState = "Off"
	On          PowerState = "On"
	PoweringOff PowerState = "PoweringOff"
	PoweringOn  PowerState = "PoweringOn"
)

// Defines values for ResetType.
const (
	ResetTypeForceOff         ResetType = "ForceOff"
	ResetTypeForceOn          ResetType = "ForceOn"
	ResetTypeForceRestart     ResetType = "ForceRestart"
	ResetTypeGracefulRestart  ResetType = "GracefulRestart"
	ResetTypeGracefulShutdown ResetType = "GracefulShutdown"
	ResetTypeNmi              ResetType = "Nmi"
	ResetTypeOn               ResetType = "On"
	ResetTypePowerCycle       ResetType = "PowerCycle"
	ResetTypePushPowerButton  ResetType = "PushPowerButton"
)

// Defines values for State.
const (
	StateAbsent             State = "Absent"
	StateDeferring          State = "Deferring"
	StateDisabled           State = "Disabled"
	StateEnabled            State = "Enabled"
	StateInTest             State = "InTest"
	StateQuiesced           State = "Quiesced"
	StateStandbyOffline     State = "StandbyOffline"
	StateStandbySpare       State = "StandbySpare"
	StateStarting           State = "Starting"
	StateUnavailableOffline State = "UnavailableOffline"
	StateUpdating           State = "Updating"
)

// Defines values for TaskState.
const (
	TaskStateCancelled   TaskState = "Cancelled"
	TaskStateCancelling  TaskState = "Cancelling"
	TaskStateCompleted   TaskState = "Completed"
	TaskStateException   TaskState = "Exception"
	TaskStateInterrupted TaskState = "Interrupted"
	TaskStateKilled      TaskState = "Killed"
	TaskStateNew         TaskState = "New"
	TaskStatePending     TaskState = "Pending"
	TaskStateRunning     TaskState = "Running"
	TaskStateService     TaskState = "Service"
	TaskStateStarting    TaskState = "Starting"
	TaskStateStopping    TaskState = "Stopping"
	TaskStateSuspended   TaskState = "Suspended"
)

// Defines values for TransferMethod.
const (
	Stream TransferMethod = "Stream"
	Upload TransferMethod = "Upload"
)

// Defines values for TransferProtocolType.
const (
	CIFS  TransferProtocolType = "CIFS"
	FTP   TransferProtocolType = "FTP"
	HTTP  TransferProtocolType = "HTTP"
	HTTPS TransferProtocolType = "HTTPS"
	NFS   TransferProtocolType = "NFS"
	SCP   TransferProtocolType = "SCP"
	SFTP  TransferProtocolType = "SFTP"
	TFTP  TransferProtocolType = "TFTP"
)

// Defines values for VolumeType.
const (
	Mirrored                 VolumeType = "Mirrored"
	NonRedundant             VolumeType = "NonRedundant"
	RawDevice                VolumeType = "RawDevice"
	SpannedMirrors           VolumeType = "SpannedMirrors"
	SpannedStripesWithParity VolumeType = "SpannedStripesWithParity"
	StripedWithParity        VolumeType = "StripedWithParity"
)

// Boot defines model for Boot.
type Boot struct {
	BootSourceOverrideEnabled                      *BootSourceOverrideEnabled `json:"BootSourceOverrideEnabled,omitempty"`
	BootSourceOverrideTarget                       *BootSource                `json:"BootSourceOverrideTarget,omitempty"`
	BootSourceOverrideTargetRedfishAllowableValues *[]BootSource              `json:"BootSourceOverrideTarget@Redfish.AllowableValues,omitempty"`
}

// BootSource defines model for BootSource.
type BootSource string

// BootSourceOverrideEnabled defines model for BootSourceOverrideEnabled.
type BootSourceOverrideEnabled string

// Collection A Collection of ComputerSystem resource instances.
type Collection struct {
	// OdataContext context
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataEtag etag
	OdataEtag *string `json:"@odata.etag,omitempty"`

	// OdataId id
	OdataId string `json:"@odata.id"`

	// OdataType type
	OdataType string `json:"@odata.type"`

	// Description description
	Description nullable.Nullable[string] `json:"Description,omitempty"`

	// Members Contains the members of this collection.
	Members *[]IdRef `json:"Members,omitempty"`

	// MembersOdataCount The number of items in a collection.
	MembersOdataCount *int `json:"Members@odata.count,omitempty"`

	// MembersOdataNextLink The URI to the resource containing the next set of partial members.
	MembersOdataNextLink *string `json:"Members@odata.nextLink,omitempty"`

	// Name The name of the resource.
	Name *string `json:"Name,omitempty"`
}

// ComputerSystem Root redfish path.
type ComputerSystem struct {
	// RedfishCopyright redfish copyright
	RedfishCopyright *string `json:"@Redfish.Copyright,omitempty"`

	// OdataContext The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *string                `json:"@odata.type,omitempty"`
	Actions   *ComputerSystemActions `json:"Actions,omitempty"`

	// Bios A reference to a resource.
	Bios *IdRef `json:"Bios,omitempty"`
	Boot *Boot  `json:"Boot,omitempty"`

	// EthernetInterfaces A reference to a resource.
	EthernetInterfaces *IdRef `json:"EthernetInterfaces,omitempty"`

	// Id The name of the resource.
	Id           *string       `json:"Id,omitempty"`
	IndicatorLED *IndicatorLED `json:"IndicatorLED,omitempty"`
	Links        *SystemLinks  `json:"Links,omitempty"`

	// Memory A reference to a resource.
	Memory        *IdRef         `json:"Memory,omitempty"`
	MemorySummary *MemorySummary `json:"MemorySummary,omitempty"`

	// Name The name of the resource.
	Name             *string           `json:"Name,omitempty"`
	PowerState       *PowerState       `json:"PowerState,omitempty"`
	ProcessorSummary *ProcessorSummary `json:"ProcessorSummary,omitempty"`

	// Processors A reference to a resource.
	Processors *IdRef `json:"Processors,omitempty"`

	// RedfishVersion redfish version
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// SimpleStorage A reference to a resource.
	SimpleStorage *IdRef  `json:"SimpleStorage,omitempty"`
	Status        *Status `json:"Status,omitempty"`
	UUID          *string `json:"UUID,omitempty"`
}

// ComputerSystemReset defines model for ComputerSystemReset.
type ComputerSystemReset struct {
	ResetTypeRedfishAllowableValues *[]ResetType `json:"ResetType@Redfish.AllowableValues,omitempty"`

	// Target The unique identifier for a resource.
	Target *string `json:"target,omitempty"`
}

// ComputerSystemActions defines model for ComputerSystem_Actions.
type ComputerSystemActions struct {
	HashComputerSystemReset *ComputerSystemReset `json:"#ComputerSystem.Reset,omitempty"`
}

// ConnectedVia defines model for ConnectedVia.
type ConnectedVia string

// CreateVirtualDiskRequestBody defines model for CreateVirtualDiskRequestBody.
type CreateVirtualDiskRequestBody struct {
	Drives     []IdRef    `json:"Drives"`
	Name       string     `json:"Name"`
	VolumeType VolumeType `json:"VolumeType"`
}

// EjectMediaRequestBody defines model for EjectMediaRequestBody.
type EjectMediaRequestBody = map[string]interface{}

// FirmwareInventory defines model for FirmwareInventory.
type FirmwareInventory struct {
	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`
}

// Health defines model for Health.
type Health string

// IDRACResetRequestBody defines model for IDRACResetRequestBody.
type IDRACResetRequestBody struct {
	ResetType *IDRACResetType `json:"ResetType,omitempty"`
}

// IDRACResetType defines model for IDRACResetType.
type IDRACResetType string

// IndicatorLED defines model for IndicatorLED.
type IndicatorLED string

// InsertMediaRequestBody defines model for InsertMediaRequestBody.
type InsertMediaRequestBody struct {
	Image                string                `json:"Image"`
	Inserted             *bool                 `json:"Inserted,omitempty"`
	Password             *string               `json:"Password,omitempty"`
	TransferMethod       *TransferMethod       `json:"TransferMethod,omitempty"`
	TransferProtocolType *TransferProtocolType `json:"TransferProtocolType,omitempty"`
	UserName             *string               `json:"UserName,omitempty"`
	WriteProtected       *bool                 `json:"WriteProtected,omitempty"`
}

// Manager Redfish manager resource.
type Manager struct {
	// RedfishCopyright redfish copyright
	RedfishCopyright *string `json:"@Redfish.Copyright,omitempty"`

	// OdataContext The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *string                   `json:"@odata.type,omitempty"`
	DateTime  nullable.Nullable[string] `json:"DateTime,omitempty"`

	// DateTimeLocalOffset The time offset from UTC that the DateTime property is set to in format: +06:00 .
	DateTimeLocalOffset nullable.Nullable[string] `json:"DateTimeLocalOffset,omitempty"`

	// Description description
	Description nullable.Nullable[string] `json:"Description,omitempty"`

	// EthernetInterfaces A reference to a resource.
	EthernetInterfaces *IdRef                    `json:"EthernetInterfaces,omitempty"`
	FirmwareVersion    nullable.Nullable[string] `json:"FirmwareVersion,omitempty"`

	// Id The name of the resource.
	Id          *string                   `json:"Id,omitempty"`
	Links       *ManagerLinks             `json:"Links,omitempty"`
	ManagerType *ManagerType              `json:"ManagerType,omitempty"`
	Model       nullable.Nullable[string] `json:"Model,omitempty"`

	// Name The name of the resource.
	Name                  *string     `json:"Name,omitempty"`
	PowerState            *PowerState `json:"PowerState,omitempty"`
	ServiceEntryPointUUID *string     `json:"ServiceEntryPointUUID,omitempty"`
	Status                *Status     `json:"Status,omitempty"`
	UUID                  *string     `json:"UUID,omitempty"`

	// VirtualMedia A reference to a resource.
	VirtualMedia *IdRef `json:"VirtualMedia,omitempty"`
}

// ManagerLinks defines model for ManagerLinks.
type ManagerLinks struct {
	ManagerForChassis  *[]IdRef `json:"ManagerForChassis,omitempty"`
	ManagerForServers  *[]IdRef `json:"ManagerForServers,omitempty"`
	ManagerForSwitches *[]IdRef `json:"ManagerForSwitches,omitempty"`
	ManagerInChassis   *[]IdRef `json:"ManagerInChassis,omitempty"`
}

// ManagerType defines model for ManagerType.
type ManagerType string

// MemorySummary defines model for MemorySummary.
type MemorySummary struct {
	Status                         *Status                    `json:"Status,omitempty"`
	TotalSystemMemoryGiB           nullable.Nullable[float32] `json:"TotalSystemMemoryGiB,omitempty"`
	TotalSystemPersistentMemoryGiB nullable.Nullable[float32] `json:"TotalSystemPersistentMemoryGiB,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Message           *string   `json:"Message,omitempty"`
	MessageArgs       *[]string `json:"MessageArgs,omitempty"`
	MessageId         *string   `json:"MessageId,omitempty"`
	RelatedProperties *[]string `json:"RelatedProperties,omitempty"`
	Resolution        *string   `json:"Resolution,omitempty"`
	Severity          *string   `json:"Severity,omitempty"`
}

// Payload The HTTP and JSON payload details for this Task.
type Payload struct {
	// HttpHeaders This represents the HTTP headers used in the operation of this Task.
	HttpHeaders *[]string `json:"HttpHeaders,omitempty"`

	// HttpOperation The HTTP operation to perform to execute this Task.
	HttpOperation *string `json:"HttpOperation,omitempty"`

	// JsonBody This property contains the JSON payload to use in the execution of this Task.
	JsonBody *string `json:"JsonBody,omitempty"`

	// TargetUri The URI of the target for this task.
	TargetUri *string `json:"TargetUri,omitempty"`
}

// PowerState defines model for PowerState.
type PowerState string

// ProcessorSummary defines model for ProcessorSummary.
type ProcessorSummary struct {
	Count  nullable.Nullable[int] `json:"Count,omitempty"`
	Status *Status                `json:"Status,omitempty"`
}

// RedfishError Contains an error payload from a Redfish Service.
type RedfishError struct {
	Error RedfishErrorError `json:"error"`
}

// RedfishErrorError defines model for RedfishError_error.
type RedfishErrorError struct {
	MessageExtendedInfo *[]Message `json:"@Message.ExtendedInfo,omitempty"`
	Code                *string    `json:"code,omitempty"`
	Message             *string    `json:"message,omitempty"`
}

// ResetRequestBody defines model for ResetRequestBody.
type ResetRequestBody struct {
	ResetType *ResetType `json:"ResetType,omitempty"`
}

// ResetType defines model for ResetType.
type ResetType string

// Root Root redfish path.
type Root struct {
	// RedfishCopyright redfish copyright
	RedfishCopyright *string `json:"@Redfish.Copyright,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *string `json:"@odata.type,omitempty"`

	// Id The name of the resource.
	Id *string `json:"Id,omitempty"`

	// Managers A reference to a resource.
	Managers *IdRef `json:"Managers,omitempty"`

	// Name The name of the resource.
	Name *string `json:"Name,omitempty"`

	// RedfishVersion redfish version
	RedfishVersion *string `json:"RedfishVersion,omitempty"`

	// Systems A reference to a resource.
	Systems *IdRef  `json:"Systems,omitempty"`
	UUID    *string `json:"UUID,omitempty"`
}

// SimpleUpdateRequestBody defines model for SimpleUpdateRequestBody.
type SimpleUpdateRequestBody struct {
	ImageURI             string                `json:"ImageURI"`
	Targets              *[]string             `json:"Targets,omitempty"`
	TransferProtocolType *TransferProtocolType `json:"TransferProtocolType,omitempty"`
}

// SoftwareInventory This schema defines an inventory of software components.
type SoftwareInventory struct {
	OdataContext           *string                      `json:"@odata.context,omitempty"`
	OdataEtag              *string                      `json:"@odata.etag,omitempty"`
	OdataId                *string                      `json:"@odata.id,omitempty"`
	OdataType              *string                      `json:"@odata.type,omitempty"`
	Description            nullable.Nullable[string]    `json:"Description,omitempty"`
	Id                     *string                      `json:"Id,omitempty"`
	LowestSupportedVersion nullable.Nullable[string]    `json:"LowestSupportedVersion,omitempty"`
	Manufacturer           nullable.Nullable[string]    `json:"Manufacturer,omitempty"`
	Name                   *string                      `json:"Name,omitempty"`
	RelatedItem            *[]IdRef                     `json:"RelatedItem,omitempty"`
	RelatedItemOdataCount  nullable.Nullable[int]       `json:"RelatedItem@odata.count,omitempty"`
	ReleaseDate            nullable.Nullable[time.Time] `json:"ReleaseDate,omitempty"`
	SoftwareId             *string                      `json:"SoftwareId,omitempty"`
	Status                 *Status                      `json:"Status,omitempty"`
	UefiDevicePaths        *[]string                    `json:"UefiDevicePaths,omitempty"`
	Updateable             nullable.Nullable[bool]      `json:"Updateable,omitempty"`
	Version                nullable.Nullable[string]    `json:"Version,omitempty"`
}

// State defines model for State.
type State string

// Status defines model for Status.
type Status struct {
	Health       *Health `json:"Health,omitempty"`
	HealthRollup *Health `json:"HealthRollup,omitempty"`
	State        *State  `json:"State,omitempty"`
}

// SystemLinks defines model for SystemLinks.
type SystemLinks struct {
	Chassis   *[]IdRef `json:"Chassis,omitempty"`
	ManagedBy *[]IdRef `json:"ManagedBy,omitempty"`
}

// Task This resource contains information about a specific Task scheduled by or being executed by a Redfish service's Task Service.
type Task struct {
	// OdataContext The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataEtag The current ETag of the resource.
	OdataEtag *string `json:"@odata.etag,omitempty"`

	// OdataId The name of the resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *string `json:"@odata.type,omitempty"`

	// Description description
	Description nullable.Nullable[string] `json:"Description,omitempty"`

	// EndTime The date-time stamp that the task was last completed.
	EndTime *string `json:"EndTime,omitempty"`

	// HidePayload Indicates that the contents of the Payload should be hidden from view after the Task has been created.  When set to True, the Payload object will not be returned on GET.
	HidePayload *bool `json:"HidePayload,omitempty"`

	// Id The name of the resource.
	Id *string `json:"Id,omitempty"`

	// Messages This is an array of messages associated with the task.
	Messages *[]Message `json:"Messages,omitempty"`

	// Name The name of the resource.
	Name *string `json:"Name,omitempty"`

	// Oem This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem *string `json:"Oem,omitempty"`

	// Payload The HTTP and JSON payload details for this Task.
	Payload *Payload `json:"Payload,omitempty"`

	// StartTime The date-time stamp that the task was last started.
	StartTime *time.Time `json:"StartTime,omitempty"`

	// TaskMonitor The URI of the Task Monitor for this task.
	TaskMonitor *string    `json:"TaskMonitor,omitempty"`
	TaskState   *TaskState `json:"TaskState,omitempty"`
	TaskStatus  *Health    `json:"TaskStatus,omitempty"`
}

// TaskState defines model for TaskState.
type TaskState string

// TransferMethod defines model for TransferMethod.
type TransferMethod string

// TransferProtocolType defines model for TransferProtocolType.
type TransferProtocolType string

// UpdateService Redfish Update Service.
type UpdateService struct {
	// OdataContext The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType *string               `json:"@odata.type,omitempty"`
	Actions   *UpdateServiceActions `json:"Actions,omitempty"`

	// Description description
	Description       nullable.Nullable[string] `json:"Description,omitempty"`
	FirmwareInventory *FirmwareInventory        `json:"FirmwareInventory,omitempty"`
	HttpPushUri       *string                   `json:"HttpPushUri,omitempty"`

	// Id The name of the resource.
	Id *string `json:"Id,omitempty"`

	// Name The name of the resource.
	Name           *string                 `json:"Name,omitempty"`
	ServiceEnabled nullable.Nullable[bool] `json:"ServiceEnabled,omitempty"`
}

// UpdateServiceActions defines model for UpdateService_Actions.
type UpdateServiceActions struct {
	HashUpdateServiceSimpleUpdate *VirtualMediaActionsVirtualMediaEjectMedia `json:"#UpdateService.SimpleUpdate,omitempty"`
	HashUpdateServiceStartUpdate  *VirtualMediaActionsVirtualMediaEjectMedia `json:"#UpdateService.StartUpdate,omitempty"`
}

// VirtualMedia Redfish virtual media resource for manager.
type VirtualMedia struct {
	// RedfishCopyright redfish copyright
	RedfishCopyright *string `json:"@Redfish.Copyright,omitempty"`

	// OdataContext The OData description of a payload.
	OdataContext *string `json:"@odata.context,omitempty"`

	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`

	// OdataType The type of a resource.
	OdataType    *string              `json:"@odata.type,omitempty"`
	Actions      *VirtualMediaActions `json:"Actions,omitempty"`
	ConnectedVia *ConnectedVia        `json:"ConnectedVia,omitempty"`

	// Description description
	Description nullable.Nullable[string] `json:"Description,omitempty"`

	// Id The name of the resource.
	Id         *string                   `json:"Id,omitempty"`
	Image      nullable.Nullable[string] `json:"Image,omitempty"`
	ImageName  nullable.Nullable[string] `json:"ImageName,omitempty"`
	Inserted   nullable.Nullable[bool]   `json:"Inserted,omitempty"`
	MediaTypes *[]string                 `json:"MediaTypes,omitempty"`

	// Name The name of the resource.
	Name                 *string                   `json:"Name,omitempty"`
	Password             nullable.Nullable[string] `json:"Password,omitempty"`
	TransferMethod       *TransferMethod           `json:"TransferMethod,omitempty"`
	TransferProtocolType *TransferProtocolType     `json:"TransferProtocolType,omitempty"`
	UserName             nullable.Nullable[string] `json:"UserName,omitempty"`
	WriteProtected       nullable.Nullable[bool]   `json:"WriteProtected,omitempty"`
}

// VirtualMediaActions defines model for VirtualMedia_Actions.
type VirtualMediaActions struct {
	HashVirtualMediaEjectMedia  *VirtualMediaActionsVirtualMediaEjectMedia `json:"#VirtualMedia.EjectMedia,omitempty"`
	HashVirtualMediaInsertMedia *VirtualMediaActionsVirtualMediaEjectMedia `json:"#VirtualMedia.InsertMedia,omitempty"`
}

// VirtualMediaActionsVirtualMediaEjectMedia defines model for VirtualMedia_Actions__VirtualMedia_EjectMedia.
type VirtualMediaActionsVirtualMediaEjectMedia struct {
	// Target The unique identifier for a resource.
	Target *string `json:"target,omitempty"`
}

// VolumeType defines model for VolumeType.
type VolumeType string

// IdRef A reference to a resource.
type IdRef struct {
	// OdataId The unique identifier for a resource.
	OdataId *string `json:"@odata.id,omitempty"`
}

// FirmwareInventoryDownloadImageMultipartBody defines parameters for FirmwareInventoryDownloadImage.
type FirmwareInventoryDownloadImageMultipartBody struct {
	SoftwareImage *openapi_types.File `json:"softwareImage,omitempty"`
}

// ResetIdracJSONRequestBody defines body for ResetIdrac for application/json ContentType.
type ResetIdracJSONRequestBody = IDRACResetRequestBody

// EjectVirtualMediaJSONRequestBody defines body for EjectVirtualMedia for application/json ContentType.
type EjectVirtualMediaJSONRequestBody = EjectMediaRequestBody

// InsertVirtualMediaJSONRequestBody defines body for InsertVirtualMedia for application/json ContentType.
type InsertVirtualMediaJSONRequestBody = InsertMediaRequestBody

// ResetSystemJSONRequestBody defines body for ResetSystem for application/json ContentType.
type ResetSystemJSONRequestBody = ResetRequestBody

// CreateVirtualDiskJSONRequestBody defines body for CreateVirtualDisk for application/json ContentType.
type CreateVirtualDiskJSONRequestBody = CreateVirtualDiskRequestBody

// SetSystemJSONRequestBody defines body for SetSystem for application/json ContentType.
type SetSystemJSONRequestBody = ComputerSystem

// UpdateServiceSimpleUpdateJSONRequestBody defines body for UpdateServiceSimpleUpdate for application/json ContentType.
type UpdateServiceSimpleUpdateJSONRequestBody = SimpleUpdateRequestBody

// FirmwareInventoryDownloadImageMultipartRequestBody defines body for FirmwareInventoryDownloadImage for multipart/formdata ContentType.
type FirmwareInventoryDownloadImageMultipartRequestBody FirmwareInventoryDownloadImageMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /redfish/v1)
	GetRoot(c *gin.Context)

	// (GET /redfish/v1/Managers)
	ListManagers(c *gin.Context)

	// (POST /redfish/v1/Managers/iDRAC.Embedded.1/Actions/Manager.Reset)
	ResetIdrac(c *gin.Context)

	// (GET /redfish/v1/Managers/{managerId})
	GetManager(c *gin.Context, managerId string)

	// (GET /redfish/v1/Managers/{managerId}/VirtualMedia)
	ListManagerVirtualMedia(c *gin.Context, managerId string)

	// (GET /redfish/v1/Managers/{managerId}/VirtualMedia/{virtualMediaId})
	GetManagerVirtualMedia(c *gin.Context, managerId string, virtualMediaId string)

	// (POST /redfish/v1/Managers/{managerId}/VirtualMedia/{virtualMediaId}/Actions/VirtualMedia.EjectMedia)
	EjectVirtualMedia(c *gin.Context, managerId string, virtualMediaId string)

	// (POST /redfish/v1/Managers/{managerId}/VirtualMedia/{virtualMediaId}/Actions/VirtualMedia.InsertMedia)
	InsertVirtualMedia(c *gin.Context, managerId string, virtualMediaId string)

	// (GET /redfish/v1/Systems)
	ListSystems(c *gin.Context)

	// (POST /redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset)
	ResetSystem(c *gin.Context, computerSystemId string)

	// (DELETE /redfish/v1/Systems/{ComputerSystemId}/Storage/Volumes/{StorageId})
	DeleteVirtualdisk(c *gin.Context, computerSystemId string, storageId string)

	// (GET /redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageControllerId}/Volumes)
	GetVolumes(c *gin.Context, computerSystemId string, storageControllerId string)

	// (POST /redfish/v1/Systems/{ComputerSystemId}/Storage/{StorageControllerId}/Volumes)
	CreateVirtualDisk(c *gin.Context, computerSystemId string, storageControllerId string)

	// (GET /redfish/v1/Systems/{systemId})
	GetSystem(c *gin.Context, systemId string)

	// (PATCH /redfish/v1/Systems/{systemId})
	SetSystem(c *gin.Context, systemId string)

	// (GET /redfish/v1/TaskService/Tasks)
	GetTaskList(c *gin.Context)

	// (GET /redfish/v1/TaskService/Tasks/{taskId})
	GetTask(c *gin.Context, taskId string)

	// (GET /redfish/v1/UpdateService)
	UpdateService(c *gin.Context)

	// (POST /redfish/v1/UpdateService/Actions/UpdateService.SimpleUpdate)
	UpdateServiceSimpleUpdate(c *gin.Context)

	// (GET /redfish/v1/UpdateService/FirmwareInventory)
	FirmwareInventory(c *gin.Context)

	// (POST /redfish/v1/UpdateService/FirmwareInventory)
	FirmwareInventoryDownloadImage(c *gin.Context)

	// (GET /redfish/v1/UpdateService/FirmwareInventory/{softwareId})
	GetSoftwareInventory(c *gin.Context, softwareId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRoot operation middleware
func (siw *ServerInterfaceWrapper) GetRoot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRoot(c)
}

// ListManagers operation middleware
func (siw *ServerInterfaceWrapper) ListManagers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListManagers(c)
}

// ResetIdrac operation middleware
func (siw *ServerInterfaceWrapper) ResetIdrac(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetIdrac(c)
}

// GetManager operation middleware
func (siw *ServerInterfaceWrapper) GetManager(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetManager(c, managerId)
}

// ListManagerVirtualMedia operation middleware
func (siw *ServerInterfaceWrapper) ListManagerVirtualMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListManagerVirtualMedia(c, managerId)
}

// GetManagerVirtualMedia operation middleware
func (siw *ServerInterfaceWrapper) GetManagerVirtualMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "virtualMediaId" -------------
	var virtualMediaId string

	err = runtime.BindStyledParameterWithOptions("simple", "virtualMediaId", c.Param("virtualMediaId"), &virtualMediaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter virtualMediaId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetManagerVirtualMedia(c, managerId, virtualMediaId)
}

// EjectVirtualMedia operation middleware
func (siw *ServerInterfaceWrapper) EjectVirtualMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "virtualMediaId" -------------
	var virtualMediaId string

	err = runtime.BindStyledParameterWithOptions("simple", "virtualMediaId", c.Param("virtualMediaId"), &virtualMediaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter virtualMediaId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EjectVirtualMedia(c, managerId, virtualMediaId)
}

// InsertVirtualMedia operation middleware
func (siw *ServerInterfaceWrapper) InsertVirtualMedia(c *gin.Context) {

	var err error

	// ------------- Path parameter "managerId" -------------
	var managerId string

	err = runtime.BindStyledParameterWithOptions("simple", "managerId", c.Param("managerId"), &managerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter managerId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "virtualMediaId" -------------
	var virtualMediaId string

	err = runtime.BindStyledParameterWithOptions("simple", "virtualMediaId", c.Param("virtualMediaId"), &virtualMediaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter virtualMediaId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InsertVirtualMedia(c, managerId, virtualMediaId)
}

// ListSystems operation middleware
func (siw *ServerInterfaceWrapper) ListSystems(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSystems(c)
}

// ResetSystem operation middleware
func (siw *ServerInterfaceWrapper) ResetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "ComputerSystemId" -------------
	var computerSystemId string

	err = runtime.BindStyledParameterWithOptions("simple", "ComputerSystemId", c.Param("ComputerSystemId"), &computerSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ComputerSystemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetSystem(c, computerSystemId)
}

// DeleteVirtualdisk operation middleware
func (siw *ServerInterfaceWrapper) DeleteVirtualdisk(c *gin.Context) {

	var err error

	// ------------- Path parameter "ComputerSystemId" -------------
	var computerSystemId string

	err = runtime.BindStyledParameterWithOptions("simple", "ComputerSystemId", c.Param("ComputerSystemId"), &computerSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ComputerSystemId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "StorageId" -------------
	var storageId string

	err = runtime.BindStyledParameterWithOptions("simple", "StorageId", c.Param("StorageId"), &storageId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter StorageId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteVirtualdisk(c, computerSystemId, storageId)
}

// GetVolumes operation middleware
func (siw *ServerInterfaceWrapper) GetVolumes(c *gin.Context) {

	var err error

	// ------------- Path parameter "ComputerSystemId" -------------
	var computerSystemId string

	err = runtime.BindStyledParameterWithOptions("simple", "ComputerSystemId", c.Param("ComputerSystemId"), &computerSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ComputerSystemId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "StorageControllerId" -------------
	var storageControllerId string

	err = runtime.BindStyledParameterWithOptions("simple", "StorageControllerId", c.Param("StorageControllerId"), &storageControllerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter StorageControllerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVolumes(c, computerSystemId, storageControllerId)
}

// CreateVirtualDisk operation middleware
func (siw *ServerInterfaceWrapper) CreateVirtualDisk(c *gin.Context) {

	var err error

	// ------------- Path parameter "ComputerSystemId" -------------
	var computerSystemId string

	err = runtime.BindStyledParameterWithOptions("simple", "ComputerSystemId", c.Param("ComputerSystemId"), &computerSystemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ComputerSystemId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "StorageControllerId" -------------
	var storageControllerId string

	err = runtime.BindStyledParameterWithOptions("simple", "StorageControllerId", c.Param("StorageControllerId"), &storageControllerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter StorageControllerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateVirtualDisk(c, computerSystemId, storageControllerId)
}

// GetSystem operation middleware
func (siw *ServerInterfaceWrapper) GetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Param("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter systemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSystem(c, systemId)
}

// SetSystem operation middleware
func (siw *ServerInterfaceWrapper) SetSystem(c *gin.Context) {

	var err error

	// ------------- Path parameter "systemId" -------------
	var systemId string

	err = runtime.BindStyledParameterWithOptions("simple", "systemId", c.Param("systemId"), &systemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter systemId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetSystem(c, systemId)
}

// GetTaskList operation middleware
func (siw *ServerInterfaceWrapper) GetTaskList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskList(c)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c, taskId)
}

// UpdateService operation middleware
func (siw *ServerInterfaceWrapper) UpdateService(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateService(c)
}

// UpdateServiceSimpleUpdate operation middleware
func (siw *ServerInterfaceWrapper) UpdateServiceSimpleUpdate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateServiceSimpleUpdate(c)
}

// FirmwareInventory operation middleware
func (siw *ServerInterfaceWrapper) FirmwareInventory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FirmwareInventory(c)
}

// FirmwareInventoryDownloadImage operation middleware
func (siw *ServerInterfaceWrapper) FirmwareInventoryDownloadImage(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FirmwareInventoryDownloadImage(c)
}

// GetSoftwareInventory operation middleware
func (siw *ServerInterfaceWrapper) GetSoftwareInventory(c *gin.Context) {

	var err error

	// ------------- Path parameter "softwareId" -------------
	var softwareId string

	err = runtime.BindStyledParameterWithOptions("simple", "softwareId", c.Param("softwareId"), &softwareId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter softwareId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSoftwareInventory(c, softwareId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/redfish/v1", wrapper.GetRoot)
	router.GET(options.BaseURL+"/redfish/v1/Managers", wrapper.ListManagers)
	router.POST(options.BaseURL+"/redfish/v1/Managers/iDRAC.Embedded.1/Actions/Manager.Reset", wrapper.ResetIdrac)
	router.GET(options.BaseURL+"/redfish/v1/Managers/:managerId", wrapper.GetManager)
	router.GET(options.BaseURL+"/redfish/v1/Managers/:managerId/VirtualMedia", wrapper.ListManagerVirtualMedia)
	router.GET(options.BaseURL+"/redfish/v1/Managers/:managerId/VirtualMedia/:virtualMediaId", wrapper.GetManagerVirtualMedia)
	router.POST(options.BaseURL+"/redfish/v1/Managers/:managerId/VirtualMedia/:virtualMediaId/Actions/VirtualMedia.EjectMedia", wrapper.EjectVirtualMedia)
	router.POST(options.BaseURL+"/redfish/v1/Managers/:managerId/VirtualMedia/:virtualMediaId/Actions/VirtualMedia.InsertMedia", wrapper.InsertVirtualMedia)
	router.GET(options.BaseURL+"/redfish/v1/Systems", wrapper.ListSystems)
	router.POST(options.BaseURL+"/redfish/v1/Systems/:ComputerSystemId/Actions/ComputerSystem.Reset", wrapper.ResetSystem)
	router.DELETE(options.BaseURL+"/redfish/v1/Systems/:ComputerSystemId/Storage/Volumes/:StorageId", wrapper.DeleteVirtualdisk)
	router.GET(options.BaseURL+"/redfish/v1/Systems/:ComputerSystemId/Storage/:StorageControllerId/Volumes", wrapper.GetVolumes)
	router.POST(options.BaseURL+"/redfish/v1/Systems/:ComputerSystemId/Storage/:StorageControllerId/Volumes", wrapper.CreateVirtualDisk)
	router.GET(options.BaseURL+"/redfish/v1/Systems/:systemId", wrapper.GetSystem)
	router.PATCH(options.BaseURL+"/redfish/v1/Systems/:systemId", wrapper.SetSystem)
	router.GET(options.BaseURL+"/redfish/v1/TaskService/Tasks", wrapper.GetTaskList)
	router.GET(options.BaseURL+"/redfish/v1/TaskService/Tasks/:taskId", wrapper.GetTask)
	router.GET(options.BaseURL+"/redfish/v1/UpdateService", wrapper.UpdateService)
	router.POST(options.BaseURL+"/redfish/v1/UpdateService/Actions/UpdateService.SimpleUpdate", wrapper.UpdateServiceSimpleUpdate)
	router.GET(options.BaseURL+"/redfish/v1/UpdateService/FirmwareInventory", wrapper.FirmwareInventory)
	router.POST(options.BaseURL+"/redfish/v1/UpdateService/FirmwareInventory", wrapper.FirmwareInventoryDownloadImage)
	router.GET(options.BaseURL+"/redfish/v1/UpdateService/FirmwareInventory/:softwareId", wrapper.GetSoftwareInventory)
}
