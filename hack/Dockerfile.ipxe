# Use minimal Alpine Linux base image
FROM alpine:3.19

# Install required packages for iPXE build
RUN apk add --no-cache \
    build-base \
    git \
    musl-dev \
    perl \
    mtools \
    xorriso \
    gcc-aarch64-none-elf \
    binutils-aarch64-none-elf \
    zlib-dev \
    openssl-dev \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /build

# Clone iPXE source code
RUN git clone https://github.com/ipxe/ipxe.git

# Set working directory to ipxe/src
WORKDIR /build/ipxe/src

# Create local configuration directory
RUN mkdir -p config/local

# Create custom nap.h configuration
COPY <<-"EOF" config/local/nap.h
#ifndef CONFIG_NAP_H
#define CONFIG_NAP_H
#undef NAP_PCBIOS
#undef NAP_EFIX86
#undef NAP_EFIARM
#define NAP_NULL
#endif /* CONFIG_NAP_H */
EOF

# Create custom general.h configuration
COPY <<-"EOT" config/local/general.h
/* general.h */
#define CERT_CMD              /* Certificate management commands */
#define CONSOLE_CMD             /* Console command */
#define DIGEST_CMD            /* Image crypto digest commands */
#define DOWNLOAD_PROTO_FILE     /* Local file system access */
#define DOWNLOAD_PROTO_FTP      /* File Transfer Protocol */
#define DOWNLOAD_PROTO_HTTPS    /* Secure Hypertext Transfer Protocol */
#define DOWNLOAD_PROTO_HTTPS  /* Secure Hypertext Transfer Protocol */
#define DOWNLOAD_PROTO_NFS      /* Network File System Protocol */
#define DOWNLOAD_PROTO_NFS    /* NFS */
#define IMAGE_EFI               /* EFI image support */
#define IMAGE_TRUST_CMD       /* Image trust management commands */
#define IPSTAT_CMD              /* IP statistics command */
#define MAX_MODULES 17
#define NET_PROTO_IPV6        /* IPv6 protocol */
#define NET_PROTO_LACP        /* Link Aggregation control protocol */
#define NSLOOKUP_CMD            /* Name resolution command */
#define NSLOOKUP_CMD          /* DNS resolving command */
#define NTP_CMD                 /* NTP commands */
#define NTP_CMD               /* NTP commands */
#define NVO_CMD               /* Non-volatile option storage commands */
#define PARAM_CMD             /* params and param commands, for POSTing to tink */
#define PING_CMD                /* Ping command */
#define PING_CMD              /* Ping command */
#define POWEROFF_CMD            /* Power off command */
#define POWEROFF_CMD          /* Power off command */
#define REBOOT_CMD              /* Reboot command */
#define REBOOT_CMD            /* Reboot command */
#define ROUTE_CMD             /* Routing table management commands */
#define SANBOOT_PROTO_HTTP    /* HTTP SAN protocol */
#define TIME_CMD                /* Time command */
#define VLAN_CMD                /* VLAN commands */
#define VLAN_CMD              /* VLAN commands */
#undef CRYPTO_80211_WEP       /* WEP encryption (deprecated and insecure!) */
#undef CRYPTO_80211_WPA       /* WPA Personal, authenticating with passphrase */
#undef CRYPTO_80211_WPA2      /* Add support for stronger WPA cryptography */
#undef FCMGMT_CMD             /* Fibre Channel management commands */
#undef IBMGMT_CMD             /* Infiniband management commands */
#undef IMAGE_PNG              /* PNG image support */
#undef IMAGE_PNM              /* PNM image support */
#undef IWMGMT_CMD             /* Wireless interface management commands */
#undef NET_PROTO_EAPOL
#undef NET_PROTO_STP          /* Spanning Tree protocol */
#undef SANBOOT_PROTO_AOE      /* AoE protocol */
#undef SANBOOT_PROTO_FCP      /* Fibre Channel protocol */
#undef SANBOOT_PROTO_IB_SRP   /* Infiniband SCSI RDMA protocol */
#undef SANBOOT_PROTO_ISCSI    /* iSCSI protocol */
#undef USB_EFI                /* Provide EFI_USB_IO_PROTOCOL interface */
#undef USB_HCD_EHCI           /* EHCI USB host controller */
#undef USB_HCD_UHCI           /* UHCI USB host controller */
#undef USB_HCD_XHCI           /* xHCI USB host controller */
#undef USB_KEYBOARD           /* USB keyboards */
#undef VNIC_IPOIB             /* Infiniband IPoIB virtual NICs */
EOT

COPY <<-"EOT" ipxescript
#!ipxe

:retry_dhcp
echo Acquiring an IP
dhcp || goto retry_dhcp

:retry_boot
echo Booting from DHCP...
autoboot || goto retry_boot
EOT

# Build iPXE with ARM64 EFI target and increased heap size for large downloads
RUN make bin-arm64-efi/snp.efi -j4 EMBED=ipxescript

# Create output directory and copy the built EFI file
RUN mkdir -p /output \
    && cp bin-arm64-efi/snp.efi /output/ \
    && ls -la /output/

# Set the output directory as volume
VOLUME ["/output"]

ENTRYPOINT ["/bin/sh"]
