    diff --git a/experimental/measure.py b/experimental/measure.py
index bdc1b83..1e684b2 100644
--- a/experimental/measure.py
+++ b/experimental/measure.py
@@ -277,7 +277,6 @@ def main():
     if options.image:
         with open(options.image, 'rb') as f:
             data = f.read()
-        data = dump.unqcow2(options.image, data)
         image = dump.Edk2Image(options.image, data)
         eventlog = measure_image(options.banks, image, options.version)
 
@@ -285,9 +284,6 @@ def main():
         if edk2.Edk2VarStore.probe(options.vars):
             edk2store = edk2.Edk2VarStore(options.vars)
             varlist = edk2store.get_varlist()
-        elif edk2.Edk2VarStoreQcow2.probe(options.vars):
-            edk2store = edk2.Edk2VarStoreQcow2(options.vars)
-            varlist = edk2store.get_varlist()
         elif aws.AwsVarStore.probe(options.vars):
             awsstore = aws.AwsVarStore(options.vars)
             varlist = awsstore.get_varlist()
diff --git a/virt/firmware/dump.py b/virt/firmware/dump.py
index 892b1fb..0438b0e 100755
--- a/virt/firmware/dump.py
+++ b/virt/firmware/dump.py
@@ -638,18 +638,6 @@ def print_image_data():
 ########################################################################
 # main
 
-def unqcow2(filename, data):
-    (magic, version) = struct.unpack_from('>LL', data)
-    if magic != 0x514649fb:
-        return data
-    with tempfile.NamedTemporaryFile() as rawfile:
-        cmdline = [ 'qemu-img', 'convert',
-                    '-f', 'qcow2', '-O', 'raw',
-                    filename, rawfile.name ]
-        subprocess.run(cmdline, check = True)
-        filedata = rawfile.read()
-    return filedata
-
 def walk_tree(item, pfunc, indent = 0):
     inc = pfunc(item, indent)
     if isinstance(item, collections.UserList):
@@ -687,7 +675,6 @@ def main():
     for filename in options.input:
         with open(filename, 'rb') as f:
             data = f.read()
-        data = unqcow2(filename, data)
         image = Edk2Image(filename, data)
 
         if options.fmt == 'all' or options.fmt is None:
diff --git a/virt/firmware/varstore/autodetect.py b/virt/firmware/varstore/autodetect.py
index 4ccf731..f262db4 100644
--- a/virt/firmware/varstore/autodetect.py
+++ b/virt/firmware/varstore/autodetect.py
@@ -10,9 +10,6 @@ from virt.firmware.varstore import edk2
 from virt.firmware.varstore import jstore
 
 def open_varstore(filename):
-    if edk2.Edk2VarStoreQcow2.probe(filename):
-        return edk2.Edk2VarStoreQcow2(filename)
-
     if edk2.Edk2VarStore.probe(filename):
         return edk2.Edk2VarStore(filename)
 
diff --git a/virt/firmware/varstore/edk2.py b/virt/firmware/varstore/edk2.py
index 33b2738..04a49bd 100644
--- a/virt/firmware/varstore/edk2.py
+++ b/virt/firmware/varstore/edk2.py
@@ -156,38 +156,3 @@ class Edk2VarStore:
         blob = self.bytes_varstore(varlist)
         with open(filename, "wb") as f:
             f.write(blob)
-
-class Edk2VarStoreQcow2(Edk2VarStore):
-    """  class for edk2 efi varstore, qcow2 image """
-
-    @staticmethod
-    def probe(filename):
-        with open(filename, "rb") as f:
-            header = f.read(64)
-        (magic, version, boff, bsize, mtime, size) = struct.unpack_from('>LLQLLQ', header)
-        if magic != 0x514649fb:
-            return False
-        if size > 1024 * 1024 * 256:
-            return False
-        return True
-
-    def readfile(self):
-        logging.info('reading qcow2 edk2 varstore from %s', self.filename)
-        with tempfile.NamedTemporaryFile() as rawfile:
-            cmdline = [ 'qemu-img', 'convert',
-                        '-f', 'qcow2', '-O', 'raw',
-                        self.filename, rawfile.name ]
-            subprocess.run(cmdline, check = True)
-            self.filedata = rawfile.read()
-
-    def write_varstore(self, filename, varlist):
-        logging.info('writing qcow2 edk2 varstore to %s', filename)
-        blob = self.bytes_varstore(varlist)
-        with tempfile.NamedTemporaryFile() as rawfile:
-            rawfile.write(blob)
-            rawfile.flush()
-            cmdline = [ 'qemu-img', 'convert',
-                        '-f', 'raw', '-O', 'qcow2',
-                        '-o', 'cluster_size=4096', '-S', '4096',
-                        rawfile.name, filename ]
-            subprocess.run(cmdline, check = True)
